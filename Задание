// # Нормализация данных

// ## Задача
// Вывести в компонент App список пользователей и постов, полученных из бэкэнда.
// Список приходит денормализованным, нужно нормализовать его перед отрисовкой на UI.
// Пример нормализации и API описаны ниже.

// ## Требования

// 1. Развернуть проект. React + Typescript. Все компоненты и функции пишутся в файла App.tsx (нет деления по папкам)
// 2. Загрузить данные из API
//    1. Использовать fetch + async \ await.
//    2. Обрабатывать ошибки при запросе данных.
// 3. Нормализовать данные приходящие из бэкэнда
// 4. Использовать хуки для оптимизации ререндеров
// 5. Соблюдение принципов DRY, KISS, Single Responsibility

// ## API

// - **URL API**: `https://a600e78249690d56.mokky.dev/users`
// - **Метод запроса**: `GET`
// - **Формат данных** (пример):
//   ```json

//   [
//     {
//         "id": 1,
//         "name": "Иван",
//         "posts": [
//             {
//                 "id": 101,
//                 "title": "Первая запись",
//                 "content": "Текст 1"
//             },
//             {
//                 "id": 102,
//                 "title": "Вторая запись",
//                 "content": "Текст 2"
//             }
//         ]
//     },
//     {
//         "id": 2,
//         "name": "Мария",
//         "posts": [
//             {
//                 "id": 103,
//                 "title": "Третья запись",
//                 "content": "Текст 3"
//             }
//         ]
//     }
// ]

// ## Пример данных после нормализации

// ```json
//     {
//       "users": {
//         "1": { "id": 1, "name": "Иван", "posts": [101, 102] },
//         "2": { "id": 2, "name": "Мария", "posts": [103] }
//       },
//       "posts": {
//         "101": { "id": 101, "title": "Первая запись", "content": "Текст 1" },
//         "102": { "id": 102, "title": "Вторая запись", "content": "Текст 2" },
//         "103": { "id": 103, "title": "Третья запись", "content": "Текст 3" }
//       }
//     }